#include<iostream>

#include<queue>

using namespace std;
#define max 10
#include<string>

class OBST {
  public: int c[max][max],
  w[max][max],
  r[max][max],
  p[max],
  q[max];
  int i,
  j,
  k,
  n;
  string keys[max];

  void accept();
  void create();
  int find(int, int);
  void display();
};

void OBST::accept() {
  cout << endl << "Enter total keys in their order";
  cin >> n;
  for (i = 0; i < n; i++) {
    cout << endl << "enter key";
    cin >> keys[i];
  }

  cout << endl << "enter succcessful probabilities of given keys";
  for (i = 0; i < n; i++)
    cin >> p[i];

  cout << endl << "enter unsucccessful probabilities of given keys";
  for (i = 0; i < n; i++)
    cin >> q[i];

  cout << "Display accepted data ";

  cout << endl << "keys are :";
  for (i = 0; i < n; i++)
    cout << keys[i] << "\t";

  cout << endl << "successful prob are :";
  for (j = 0; j <n; j++)
    cout << p[j] << "\t";

  cout << endl << "unsuccessful prob are";
  for (i = 0; i <n; i++)
    cout << q[i] << "\t";

  //cout<<endl<<p[i]<<"     "<<q[i];
}

void OBST::create() {
  int m;

  //initially make c[i][i]=0 r[i][i]=0 w[i][i]=q[i] for  0<=i<=n

  for (i = 0; i < n; i++) {
    c[i][i] = 0;
    r[i][i] = 0;
    w[i][i] = q[i];
  }

  //now calculate c,w,r for level 1 i.e for j-i=1;

  for (i = 0; i < n; i++) {
    w[i][i + 1] = p[i + 1] + q[i + 1] + w[i][i];
    c[i][i + 1] = w[i][i + 1];
    r[i][i + 1] = i + 1;
  }

  w[n][n] = q[n];
  r[n][n] = c[n][n] = 0;
  //now calculate c,w,r for level 1 i.e for j-i=2 onwards;

  for (m = 2; m <= n; m++) //difference 2 ..last it will be eq
  {
    for (i = 0; i <= n - m; i++) //
    {
      j = i + m;
      w[i][j] = w[i][j - 1] + p[j] + q[j];
      k = find(i, j);
      c[i][j] = w[i][j] + c[i][k - 1] + c[k][j];
      r[i][j] = k;
    }
  }

}
int OBST::find(int i, int j) {
  int m, k = 0;
  int minimum = 32000;
  for (m = r[i][j - 1]; m <= r[i + 1][j]; m++) {
    if ((c[i][m - 1] + c[m][j]) < minimum) {
      minimum = c[i][m - 1] + c[m][j];
      k = m;
    }
  }
  return k;
}

void OBST::display() {
  queue < int > queue;
  int i, j, k;
  cout << "The Optimal Binary Search Tree For The Given Nodes Is ....\n";
  cout << "\n The Root of this OBST is :: " << r[0][n];
  cout << "\n The Cost Of this OBST is :: " << c[0][n];
  cout << "\n\n\tNODE\tLEFT CHILD\tRIGHT CHILD";
  cout << "\n -------------------------------------------------------";
  queue.push(0); //queue[++rear] = 0;
  queue.push(n); //queue[++rear] = n;

  while (!queue.empty()) {
    i = queue.front();
    queue.pop();
    j = queue.front();
    queue.pop();
    k = r[i][j];
    cout << "\n         " << k;
    if (r[i][k - 1] != 0) {
      cout << "              " << r[i][k - 1];
      queue.push(i);
      queue.push(k - 1);
    } else
      cout << "              -";

    if (r[k][j] != 0) {
      cout << "              " << r[k][j];
      queue.push(k);
      queue.push(j);
    } else
      cout << "              -";
  }
  cout << "\n";
}

int main() {
  OBST o;
  o.accept();
  o.create();
  o.display();

  return 0;
}